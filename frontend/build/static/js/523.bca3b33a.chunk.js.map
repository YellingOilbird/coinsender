{"version":3,"file":"static/js/523.bca3b33a.chunk.js","mappings":"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","sources":["../node_modules/big-integer/BigInteger.js"],"sourcesContent":["var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < digits[i]) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n"],"names":["bigInt","undefined","BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","value","sign","this","isSmall","SmallInteger","NativeBigInt","isPrecise","n","Math","floor","arrayToSmall","arr","trim","length","compareAbs","i","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","r","carry","base","push","addAny","addSmall","l","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplyKaratsuba","y","max","slice","d","c","ac","bd","abcd","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","Error","negate","abs","comparison","quotientDigit","shift","result","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","unshift","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","modPow","prototype","Object","create","plus","subtractAny","minus","small","multiply","l1","l2","times","_multiplyBySmall","divmod","over","pow","toString","_0","_1","_2","isNegative","exp","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","t","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","String","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","p","e","min","gcd","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","val","toBase","apply","map","valueOf","neg","Number","out","left","digit","toBaseString","stringify","join","parseStringValue","split","decimalPlace","indexOf","test","parseNumberValue","toArray","str","toJSON","parseInt","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","top","fromArray","module","hasOwnProperty","exports","define"],"sourceRoot":""}